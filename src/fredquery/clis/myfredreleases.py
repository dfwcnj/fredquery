
#! env python

# return information on releases or their sries
#

import argparse

from  fredquery import fredreleases

def main():
    fr = fredreleases.FREDreleases()

    argp = argparse.ArgumentParser(description='collect and report stlouisfed.org  FRED releases and/or their time series')

    argp.add_argument('--releases', action='store_true', default=False,
       help='return releases')
    argp.add_argument('--series', action='store_true', default=False,
       help='return series by series_id or by release_id')
    argp.add_argument('--observations', action='store_true', default=False,
       help='return timeseries for all series collected')

    argp.add_argument('--releaseid', required=False,
       help='a release_id identifies a FRED release')
    argp.add_argument('--seriesid', required=False,
       help='a series_id identifies a FRED series')

    argp.add_argument('--file', help="path to an output filename\n\
            if just a filename and--directory is not provided\
            the file is created in the current directory")
    argp.add_argument('--directory',
                    help="directory to write the output, if --observations\
                         filenames are autogenerated")

    args=argp.parse_args()

    if not args.releases and not args.series and not args.observations:
        argp.print_help()
        sys.exit(1)

    ofn=None
    fp = sys.stdout

    if not args.observations:
        if not args.directory and args.file:
            ofn = args.file
        elif args.directory and args.file:
            if '/' in args.file:
                argp.print_help()
                sys.exit()
            ofn = os.path.join(args.directory, args.file)
        if ofn:
            try:
                fp = open(ofn, 'w')
            except Exception as e:
                print('%s: %s' % (ofn, e) )
                sys.exit()


    if args.observations:
        if not args.directory:
            argp.print_help()
            sys.exit()
        if args.releaseid:
            fr.getseriesforrid(args.releaseid)
            fr.getobservations()
            fr.reportobservations(odir=args.directory)
        else:
            fr.getreleases()
            fr.getseries()
            fr.getobservations()
            fr.reportobservations(odir=args.directory)
    elif args.series and args.releaseid:
        fr.getseriesforrid(rid=args.releaseid)
        fr.reportseries(ofp=fp)
    elif args.series and args.seriesid:
        fr.getseriesforsid(sid=args.seriesid)
        fr.reportseries(ofp=fp)
    elif args.releases:
        fr.getreleases()
        fr.reportreleases(ofp=fp)

if __name__ == '__main__':
    main()
